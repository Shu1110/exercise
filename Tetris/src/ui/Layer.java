package ui;

import java.awt.Graphics;
import java.awt.Image;

import javax.swing.ImageIcon;

import config.ConfigFactory;
import config.GameConfig;
import dto.GameDto;

/** 
 * 绘制窗体；
 * 
 * @author xinting
 *
 */

public abstract class Layer {
	/**
	 * 绘制窗体时x坐标
	 */
	protected int x;	
	/**
	 * 绘制窗体时y坐标
	 */
	protected int y;	
	/**
	 * 绘制窗体的高度
	 */
	protected int w;	
	/**
	 * 绘制窗体的宽度
	 */
	protected int h;	
	
	protected static final int PADDING;
	private static final int SIZE;
	
	/**
	 * 数字图片 大小：480*80（48*80）
	 */
	private  static final Image IMG_NUMBER=new ImageIcon("Graphics/string/number.png").getImage();
	/**
	 * 单个数字的宽度
	 */
	protected static final int IMG_NUMBER_W=IMG_NUMBER.getWidth(null)/10;
	/**
	 * 单个数字的高度
	 */
	private static final int IMG_NUMBER_H=IMG_NUMBER.getHeight(null);

	/**
	 * dto数据源
	 */
	protected GameDto dto=null;
	static{
		//获得游戏配置
		GameConfig cfg=ConfigFactory.getGameConfig();
		PADDING=cfg.getPadding();
		SIZE=cfg.getWindowSize();
	}
	
	private static Image WINDOW_IMG=new ImageIcon("Graphics/window/window.png").getImage();
	private static int WINDOW_W=WINDOW_IMG.getWidth(null);
	private static int WINDOW_H=WINDOW_IMG.getHeight(null);

	protected Layer(int x,int y,int w,int h){
		this.x=x;
		this.y=y;
		this.w=w;
		this.h=h;
	}
	/**
	 * 绘制窗口方法
	 * @param g
	 */
	protected void createWindow(Graphics g){
		//绘制图片的左上角
		g.drawImage(WINDOW_IMG, x, y, x+SIZE, y+SIZE, 0, 0, SIZE, SIZE, null);
		//绘制图片的中上
		g.drawImage(WINDOW_IMG, x+SIZE, y, x+w-SIZE,y+SIZE, SIZE, 0, WINDOW_W-SIZE, SIZE, null);
		//绘制图片的右上
		g.drawImage(WINDOW_IMG, x+w-SIZE, y, x+w, y+SIZE, WINDOW_W-SIZE, 0, WINDOW_W, SIZE, null);
		//左中
		g.drawImage(WINDOW_IMG, x, y+SIZE, x+SIZE, y+h-SIZE, 0, SIZE, SIZE, WINDOW_H-SIZE, null);
		//中
		g.drawImage(WINDOW_IMG, x+SIZE, y+SIZE, x+w-SIZE, y+h-SIZE, SIZE, SIZE, WINDOW_W-SIZE, WINDOW_H-SIZE, null);
		//右中
		g.drawImage(WINDOW_IMG, x+w-SIZE, y+SIZE, x+w, y+h-SIZE, WINDOW_W-SIZE, SIZE, WINDOW_W, WINDOW_H-SIZE, null);
		//左下
		g.drawImage(WINDOW_IMG, x,y+h-SIZE ,x+SIZE, y+h,0, WINDOW_H-SIZE, SIZE, WINDOW_H, null);
		//中下
		g.drawImage(WINDOW_IMG, x+SIZE, y+h-SIZE, x+w-SIZE, y+h, SIZE, WINDOW_H-SIZE, WINDOW_W-SIZE, WINDOW_H, null);
		//右下
		g.drawImage(WINDOW_IMG, x+w-SIZE, y+h-SIZE, x+w, y+h, WINDOW_W-SIZE, WINDOW_H-SIZE, WINDOW_W, WINDOW_H, null);

		
	}
	
	public void setDto(GameDto dto) {
		this.dto = dto;
	}
	/**
	 * 显示数字
	 * @param x 左上角x坐标
	 * @param y 左上角y坐标
	 * @param num 要显示的数字
	 * @param maxBit数字的位数
	 * @param g画笔对象
	 */
	protected void drawNumberLeftPad(int x,int y,int num,int maxBit,Graphics g){
		//把要打印的数字转换为字符串
		String strNum= Integer.toString(num);
		//循环绘制数字右对齐
		for(int i=0;i<maxBit;i++){
			//判断是否满足绘制条件
			if(maxBit-i <= strNum.length()){
				//获得数字在字符串中的下标
				int idx=i- maxBit + strNum.length();
				//把数字number中的每一位取出
				int bit=strNum.charAt(idx) - '0';
				//绘制数字
				g.drawImage(IMG_NUMBER, 
						this.x+x+IMG_NUMBER_W*i, this.y+y, 
						this.x+x+IMG_NUMBER_W*(i+1), this.y+y+IMG_NUMBER_H, 
						bit*IMG_NUMBER_W, 0,
						(bit+1)*IMG_NUMBER_W, IMG_NUMBER_H, null);
			
			}
		}
	}

	/**
	 * 具体绘制窗口
	 * @author xinting
	 * @param g
	 */
	abstract public void paint(Graphics g);
}
